generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ExamType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  courses     Course[]
}

model Course {
  id             String           @id @default(uuid())
  name           String
  examTypeId     String
  examType       ExamType         @relation(fields: [examTypeId], references: [id])
  diets          Diet[]
  mockExams      MockExam[]
  practiceExams  PracticeExam[]
  questions      Question[]
  RecentActivity RecentActivity[]
  studySessions  StudySession[]
  userProgress   UserProgress[]
  quick10Sessions Quick10Session[]
  quick4Sessions  Quick4Session[]
}

model Diet {
  id            String         @id @default(uuid())
  name          String
  courseId      String
  course        Course         @relation(fields: [courseId], references: [id])
  practiceExams PracticeExam[]
  questions     Question[]
}

model Question {
  id                    String       @id @default(uuid())
  type                  QuestionType
  content               String
  optionA               String?
  optionB               String?
  optionC               String?
  optionD               String?
  optionE               String?
  correctAnswer         String
  explanation           String
  simplifiedExplanation String
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  courseId              String
  dietId                String
  course                Course       @relation(fields: [courseId], references: [id])
  diet                  Diet         @relation(fields: [dietId], references: [id])
}

model PracticeExam {
  id             String    @id @default(uuid())
  userId         String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  score          Float?
  courseId       String
  dietId         String
  correctAnswers Int
  timeSpent      Int
  totalQuestions Int
  course         Course    @relation(fields: [courseId], references: [id])
  diet           Diet      @relation(fields: [dietId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  @@unique([userId, courseId, dietId, startedAt])
}

model MockExam {
  id             String    @id @default(uuid())
  userId         String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  score          Float?
  courseId       String
  correctAnswers Int
  timeSpent      Int
  totalQuestions Int
  questionIds    String[]  // Add this line
  course         Course    @relation(fields: [courseId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  answers        Json?

  @@unique([userId, courseId, startedAt])
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String
  role           Role             @default(STUDENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  kindeAuthId    String           @unique
  mockExams      MockExam[]
  practiceExams  PracticeExam[]
  recentActivity RecentActivity[]
  studySessions  StudySession[]
  userProgress   UserProgress[]
  quick10Sessions Quick10Session[]
  quick4Sessions  Quick4Session[]
}

model Quick10Session {
  id             String    @id @default(uuid())
  userId         String
  courseId       String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  correctAnswers Int       @default(0)
  timeSpent      Int       @default(0)
  questionIds    String[]
  answers        Json?
  user           User      @relation(fields: [userId], references: [id])
  course         Course    @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, startedAt])
}

model Quick4Session {
  id            String    @id @default(uuid())
  userId        String
  courseId      String
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  timeSpent     Int       @default(0)
  questionIds   String[]
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, startedAt])
}

model StudySession {
  id        String    @id @default(uuid())
  userId    String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model UserProgress {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  totalAttempts  Int
  totalQuestions Int
  totalCorrect   Int
  averageScore   Float
  totalTimeSpent Int
  lastUpdated    DateTime @updatedAt
  course         Course   @relation(fields: [courseId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model RecentActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  courseId     String
  score        Float?
  completedAt  DateTime
  course       Course   @relation(fields: [courseId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId, completedAt])
}

enum QuestionType {
  MCQ
  LONG_FORM
}

enum Role {
  STUDENT
  ADMIN
}
