// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ExamType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  courses     Course[]
}

model Course {
  id            String         @id @default(uuid())
  name          String
  examType      ExamType       @relation(fields: [examTypeId], references: [id])
  examTypeId    String
  diets         Diet[]
  questions     Question[]
  practiceExams PracticeExam[]
  mockExams     MockExam[]
  studySessions StudySession[]
}

model Diet {
  id            String         @id @default(uuid())
  name          String
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      String
  questions     Question[]
  practiceExams PracticeExam[]
}

model Question {
  id                    String                 @id @default(uuid())
  diet                  Diet                   @relation(fields: [dietId], references: [id])
  dietId                String
  course                Course                 @relation(fields: [courseId], references: [id])
  courseId              String
  type                  QuestionType
  content               String
  options               Json? // For MCQs, stored as JSON
  correctAnswer         String
  explanation           String
  simplifiedExplanation String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  practiceExamQuestions PracticeExamQuestion[]
  mockExamQuestions     MockExamQuestion[]
}

enum QuestionType {
  MCQ
  LONG_FORM
}

model PracticeExam {
  id          String                 @id @default(uuid())
  user        User                   @relation(fields: [userId], references: [id])
  userId      String
  course      Course                 @relation(fields: [courseId], references: [id])
  courseId    String
  diet        Diet                   @relation(fields: [dietId], references: [id])
  dietId      String
  startedAt   DateTime               @default(now())
  completedAt DateTime?
  score       Int?
  questions   PracticeExamQuestion[]
}

model PracticeExamQuestion {
  id             String       @id @default(uuid())
  practiceExam   PracticeExam @relation(fields: [practiceExamId], references: [id])
  practiceExamId String
  question       Question     @relation(fields: [questionId], references: [id])
  questionId     String
  userAnswer     String?
  isCorrect      Boolean?
}

model MockExam {
  id          String             @id @default(uuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  course      Course             @relation(fields: [courseId], references: [id])
  courseId    String
  startedAt   DateTime           @default(now())
  completedAt DateTime?
  score       Int?
  questions   MockExamQuestion[]
}

model MockExamQuestion {
  id         String   @id @default(uuid())
  mockExam   MockExam @relation(fields: [mockExamId], references: [id])
  mockExamId String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  userAnswer String?
  isCorrect  Boolean?
}

model User {
  id            String         @id @default(uuid())
  kindeAuthId   String         @unique
  email         String         @unique
  name          String
  role          Role           @default(STUDENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  practiceExams PracticeExam[]
  mockExams     MockExam[]
  studySessions StudySession[]
}

enum Role {
  STUDENT
  ADMIN
}

model StudySession {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int? // Duration in minutes
}
